@{
    var accessToken = Context.Request.Cookies["accessToken"];
    var refreshToken = Context.Request.Cookies["refreshToken"];
    var profileImageUrl = Context.Request.Cookies["profileImageUrl"];

    bool IsAuthenticated = !string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(refreshToken);

    if (string.IsNullOrEmpty(profileImageUrl))
    {
        profileImageUrl = "https://citlali-supabase.code4.dad/storage/v1/object/public/CITLALI_USER_PROFILE_PICTURE/public/citlali-drunk.webp";
    }
    var timestamp = DateTime.Now.Ticks;
    profileImageUrl = $"{profileImageUrl}?v={timestamp}";
}

<link rel="stylesheet" href="~/css/NavBar.css" asp-append-version="true" />

<nav>
  <div class="mobile-nav-toggle-container">
    <div class="mobile-nav-toggle" id="mobile-nav-toggle">
      <span class="bar"></span>
      <span class="bar"></span>
      <span class="bar"></span>
    </div>
  </div>

  <ul>
    <div class="nav-group">
      <a href="/">
        <div class="logo">
          <img src="~/citlali.webp" alt="Logo" class="website-logo">
          <p>Citlali</p>
        </div>
      </a>
    </div>

    <div class="nav-group" id="navigation-links">
      <a href="/event/explore" class="nav-item">
        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.Home>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
        <p>Home</p>
      </a>
      @if (IsAuthenticated)
      {
        <a href="/event/followed" class="nav-item">
          @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.Star>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
          <p>Following</p>
        </a>
        <a href="/user/history" class="nav-item">
          @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.History>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
          <p>Registration History</p>
        </a>
        <a href="/notification" class="nav-item">
          @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.Alert>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
          <p id="notification-icon">Notification</p>
        </a>
      }
      <a href="/about" class="nav-item">
        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.Info>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
        <p>About</p>
      </a>
    </div>
    <div class="nav-group" id="auth-section">
      @if (IsAuthenticated)
      {
        <div class="profile-dropdown-container">
          <div class="profile-placeholder" id="profile-dropdown-toggle">
            <img src="@profileImageUrl" alt="Profile">
          </div>
          <div class="profile-dropdown" id="profile-dropdown-menu">
            <a href="/user" class="dropdown-item">
              @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.Person>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
              <span>Profile</span>
            </a>
            <form class="dropdown-item" asp-action="signout" asp-controller="auth" method="post">
              <button type="submit" class="signout-btn">
                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.SignOut>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                Sign out
              </button>
            </form>
          </div>
        </div>
      }
      else
      {
        <a href="/auth/signin" class="signin-btn">
          @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.Person>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
          Sign in
        </a>
      }
    </div>

  </ul>
</nav>

<script>

  // I know this is real shit
  // But CSS fucks me hard

  document.addEventListener('DOMContentLoaded', function() {
    // Profile dropdown functionality
    const toggleButton = document.getElementById('profile-dropdown-toggle');
    const dropdown = document.getElementById('profile-dropdown-menu');

    if (toggleButton && dropdown) {
      toggleButton.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdown.classList.toggle('show');
      });

      document.addEventListener('click', function(e) {
        if (!dropdown.contains(e.target) && !toggleButton.contains(e.target)) {
          dropdown.classList.remove('show');
        }
      });
    }

    // Mobile menu functionality
    const mobileToggle = document.getElementById('mobile-nav-toggle');
    const navLinks = document.getElementById('navigation-links');
    const authSection = document.getElementById('auth-section');
    const aboutLink = document.querySelector('a[href="/about"]');
    const navUl = document.querySelector('nav > ul');
    let isMobile = false;

    // Function to handle mobile element positioning
    function handleMobileLayout() {
      const windowWidth = window.innerWidth;
      
      // Mobile breakpoint
      if (windowWidth <= 1000 && !isMobile) {
        // Move auth section after about link in mobile view
        if (aboutLink && navLinks && authSection) {
          navLinks.insertBefore(authSection, aboutLink.nextSibling);
        }
        isMobile = true;
      } 
      // Desktop breakpoint
      else if (windowWidth > 1000 && isMobile) {
        // Move auth section back to original position
        if (navUl && authSection) {
          navUl.appendChild(authSection);
        }
        isMobile = false;
      }
    }

    // Initial check
    handleMobileLayout();

    // Listen for window resize
    window.addEventListener('resize', handleMobileLayout);

    // Toggle menu functionality
    mobileToggle.addEventListener('click', function() {
      this.classList.toggle('active');
      document.body.classList.toggle('menu-open');
      navLinks.classList.toggle('show-mobile');
    });
  });
</script>