@model Citlali.Models.RegistrationHistoryData;

@{
    ViewData["Title"] = "History";
    var statusMapper = new Dictionary<string, string> {
        { "all", "All Registrations"},
        { "pending", "Pending" },
        { "awaiting-confirmation", "Awaiting Confirmation" },
        { "rejected", "Rejected" },
        { "rejected-invitation", "Rejected Invitation" },
        { "confirmed", "Confirmed" }
    };

    var selectedStatus = "all";

    if (!String.IsNullOrEmpty(ViewData["SelectedStatus"] as string) && statusMapper.ContainsKey(ViewData["SelectedStatus"] as string ?? "all"))
    {
        selectedStatus = ViewData["SelectedStatus"]?.ToString() ?? "all";
    }

}

<div class="window">
    <div class="content">
        <div class="page-header">
            <h1>Registration History ‚è≥</h1>
            <p>Here you can find all your past events, including detailed information about each event's date, time, and description.</p>

            <div class="filter-controls">
                <div class="status-filter">
                    <label for="status-select">Filter by status:</label>
                    <select id="status-select" onchange="filterByStatus(this.value)">
                        @foreach(var item in statusMapper) {
                            var description = "";
                            try
                            {
                                description = statusMapper[item.Key];
                            }
                            catch {
                                description = item.Key;
                            }
                            <option value=@item.Key selected="@(selectedStatus == @item.Key)">@description</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="registration-history">
            @{
                var filteredRegistrations = selectedStatus == "all"
                    ? Model.RegistrationHistoryCardModels.ToArray()
                    : Model.RegistrationHistoryCardModels.Where(r => r.Status == selectedStatus).ToArray();
            }

            @if (filteredRegistrations.Any())
            {
                @foreach (var registration in filteredRegistrations) {
                    <a href="/event/detail/@registration.EventId">
                        <div class="history-card">
                            <div class="registration-detail">
                                <div class="header-data">
                                    <span class="creator">
                                        <img src=@registration.CreatorProfileImageUrl alt="Creator" />
                                        <span id="creator-display-name">@registration.CreatorDisplayName</span>
                                    </span>
                                    <span class="location">
                                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Location>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                                        @registration.LocationTag.LocationTagName
                                    </span>
                                </div>

                                <div class="card-title">
                                    <span id="event-title">
                                        <h1>@registration.EventTitle</h1>
                                        <span class="tag">
                                            <span>@registration.EventCategoryTag.EventCategoryTagEmoji</span>
                                            <span>@registration.EventCategoryTag.EventCategoryTagName</span>
                                        </span>
                                    </span>
                                    <span id="description">
                                        <p>@registration.EventDescription</p>
                                    </span>
                                </div>
                            </div>

                            <div class="status">
                                <div class="status-symbol @registration.Status">
                                    <div class="status-symbol-size-limiter">
                                        <div class="scaling-svg-container">
                                            @if (@registration.Status == "pending")
                                            {
                                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size32.ChatArrowBackDown>>(RenderMode.ServerPrerendered, new { Color = Color.Fill }))

                                            }
                                            else if (@registration.Status == "awaiting-confirmation")
                                            {
                                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size32.ChatMultiple>>(RenderMode.ServerPrerendered, new { Color = Color.Fill }))

                                            }
                                            else if (@registration.Status == "rejected" || @registration.Status == "rejected-invitation")
                                            {
                                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size32.Dismiss>>(RenderMode.ServerPrerendered, new { Color = Color.Fill }))

                                            }
                                            else if (@registration.Status == "confirmed")
                                            {
                                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size32.Checkmark>>(RenderMode.ServerPrerendered, new { Color = Color.Fill }))
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="status-text">
                                    <p id="status-text">@statusMapper[@registration.Status]</p>
                                    <p id="registration-time">@registration.RegistrationTime</p>
                                </div>
                            </div>
                        </div>
                    </a>
                }
            }
            else
            {
                <div class="empty-history">
                    <div class="empty-icon">üì≠</div>
                    <h2>No registrations found</h2>
                    @{
                        var filterDescription = "";
                        try
                        {
                            filterDescription = statusMapper[selectedStatus];
                        }
                        catch {
                            filterDescription = selectedStatus;
                        }

                        @if (selectedStatus != "all")
                        {
                            <p>You don't have any registrations with status "@filterDescription". Try a different filter or explore new events!</p>
                        }
                        else
                        {
                            <p>You haven't registered for any events yet. Start exploring and join some events!</p>
                        }
                    }
                    <a href="/event/explore" class="explore-btn">Explore Events</a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function filterByStatus(status) {
            window.location.href = '/user/history?status=' + encodeURIComponent(status);
        }
    </script>
}