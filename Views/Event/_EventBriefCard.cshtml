@model Citlali.Models.EventBriefCardData;

@functions {
    public string GetFutureRelativeTime(DateTime date) {
        const int SECOND = 1;
        const int MINUTE = 60 * SECOND;
        const int HOUR = 60 * MINUTE;
        const int DAY = 24 * HOUR;
        const int MONTH = 30 * DAY;

        var diff = date - DateTime.Now;
        var timeSpan = Math.Floor(diff.TotalSeconds);
        if (timeSpan <= 0) {
            throw new InvalidDataException();
        }

        if (timeSpan < 1 * MINUTE)
            return "a few seconds";
        if (timeSpan < 2 * MINUTE)
            return "a minute";
        if (timeSpan < 1 * HOUR)
            return $"{Math.Floor(timeSpan / MINUTE)} minutes";
        if (timeSpan < 2 * HOUR)
            return "an hour";
        if (timeSpan < 1 * DAY)
            return $"{Math.Floor(timeSpan / HOUR)} hours";
        if (timeSpan < 2 * DAY)
            return "tomorrow";
        if (timeSpan < 1 * MONTH)
            return $"{Math.Floor(timeSpan / DAY)} days";

        return date.ToString("MMM dd, yyyy");
    }
}

@{
    string relativeTime;
    bool expired = false;
    try {
        relativeTime = $"Expiring in {GetFutureRelativeTime(Model.PostExpiryDate)}";
    } catch (InvalidDataException) {
        expired = true;
        relativeTime = "Expired";
    }
}

<div class="card">
    <div class="card-content">
        <div class="header-data">
            <div class="creator">
                <a href="/user/@Model.CreatorUsername" class="creator-profile">
                    <img src="@Model.CreatorProfileImageUrl" alt="@Model.CreatorDisplayName" />
                    <span class="creator-name">@Model.CreatorDisplayName</span>
                </a>
                <div class="meta-info">
                    <span class="created-time">@Model.CreatedAt.ToString("dd/MM/yy â€¢ h:mm tt")</span>
                    <a href="/event/location/@Model.LocationTag.LocationTagId">
                        <span class="location">
                            @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Location>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                            @Model.LocationTag.LocationTagName
                        </span>
                    </a>
                </div>


                @* Mobile *@
                <div class="meta-container">
                    <div class="participant">
                        @if (Model.FirstComeFirstServed)
                        {
                            <span title="First-come-first-served event. Register early to secure your spot!">
                                <div class="participants-icon-limiter ">
                                    <div class="scaling-svg-container">
                                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.PersonRunning>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                                    </div>
                                </div>
                            </span>
                        }
                        else
                        {
                            @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.PeopleTeam>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                        }
                        <span>@Model.CurrentParticipant/@Model.MaxParticipant</span>
                    </div>

                    <a href="/event/tag/@Model.EventCategoryTag.EventCategoryTagId">
                        <div class="tag">
                            <span>@Model.EventCategoryTag.EventCategoryTagEmoji</span>
                            <span>@Model.EventCategoryTag.EventCategoryTagName</span>
                        </div>
                    </a>
                </div>
            </div>

            @* Desktop *@
            <div class="participant">
                @if (Model.FirstComeFirstServed)
                {
                    <span title="First-come-first-served event. Register early to secure your spot!">
                        <div class="participants-icon-limiter ">
                            <div class="scaling-svg-container">
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size20.PersonRunning>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                            </div>
                        </div>
                    </span>
                }
                else
                {
                    @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.PeopleTeam>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                }
                <span>@Model.CurrentParticipant/@Model.MaxParticipant</span>
            </div>
        </div>

        <div class="card-title">
            <h3 class="event-title">@Model.EventTitle</h3>
            <a href="/event/tag/@Model.EventCategoryTag.EventCategoryTagId">
                <div class="tag">
                    <span>@Model.EventCategoryTag.EventCategoryTagEmoji</span>
                    <span>@Model.EventCategoryTag.EventCategoryTagName</span>
                </div>
            </a>
        </div>

        <div class="footer">
            <p class="description">@Model.EventDescription</p>
            <span class="@(expired ? "expired" : "active")">@relativeTime</span>
        </div>
    </div>

    <a href="/event/detail/@Model.EventId" class="card-link-overlay" aria-label="View details for @Model.EventTitle"></a>
</div>