@model Citlali.Models.EventManagementViewModel

@{
    ViewData["Title"] = Model.EventTitle;

    var eventDetailCardData = new Citlali.Models.EventDetailCardData
    {
        EventTitle = Model.EventTitle,
        CreatorDisplayName = Model.CreatorDisplayName,
        CreatorUsername = Model.CreatorUsername,
        CreatorProfileImageUrl = Model.CreatorProfileImageUrl,
        EventDescription = Model.EventDescription,
        LocationTag = Model.LocationTag,
        EventCategoryTag = Model.EventCategoryTag,
        EventDate = Model.EventDate,
        MaxParticipant = Model.MaxParticipant,
        CurrentParticipant = Model.CurrentParticipant,
        Cost = Model.Cost,
        CreatedAt = Model.CreatedAt
    };

    var totalRegisteredParticipant = Model.AnswerSet.Count;

    var confirmedParticipantCount = Model.ConfirmedParticipant.Count;
    var awaitingConfirmationParticipantCount = Model.AwaitingConfirmationParticipant.Count;
    var rejectedConfirmationParticipantCount = Model.RejectedConfirmationParticipant.Count;
    var totalInvitedParticipant = confirmedParticipantCount + awaitingConfirmationParticipantCount;
}

@section head {
    <link rel="stylesheet" href="Manage.cshtml.css" asp-append-version="true" />
}
<script src="~/js/Event/Manage.js"></script>

<div class="center-wrapper">
    <div class="content">
        <!-- Broadcast Popup -->
        <div class="broadcast-popup">
            <div class="popup-content">
                <form class="popup-form" asp-controller="Event" asp-action="Broadcast" method="post" enctype="multipart/form-data">
                    <div class="popup-navigation">
                        <a class="popup-action-button" onclick="closeDialog()">
                            <span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size24.DismissCircle>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                            </span>
                        </a>
                        <div class="popup-title">
                            <h1>Broadcast</h1>
                            <description>Broadcast a message to all confirmed participants.</description>
                        </div>
                        <button type="submit" class="popup-action-button">
                            <span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size24.Send>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                            </span>
                        </button>
                    </div>

                    <div class="popup-body">
                        <div class="popup-confirmed-participants">
                            <h3>‚úÖ Confirmed Participants (@confirmedParticipantCount)</h3>
                            <description>These are the people who have confirmed their participation. Your broadcast will be sent to these people.</description>
                            <div class="popup-confirmed-participants-list">
                                @foreach (var confirmedParticipant in Model.ConfirmedParticipant)
                                {
                                    <div class="popup-each-confirmed-participant">
                                        <img src="@confirmedParticipant.ProfileImageUrl" alt="Profile" class="profile-img">
                                        <span>
                                            @confirmedParticipant.DisplayName
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <div class="popup-info">
                            <div class="form-group">
                                <input type="hidden" name="eventId" value="@Model.EventId" />
                            </div>
                            <div class="form-group">
                                <label for="title">Title</label>
                                <input type="text" class="form-control" name="title" id="title" required />
                            </div>
                            <div class="form-group">
                                <label for="message">Message</label>
                                <textarea class="form-control" name="message" id="message" rows="5" required></textarea>
                            </div>
                            <div class="form-group">
                                <button type="submit" class="broadcast-button">Broadcast</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Event Detail Section -->
        <div class="event-detail">
            <partial name="_EventDetailCard" model=@eventDetailCardData />
            <div class="control">
                <div class="event-status">
                    <span class="status-circle @Model.EventStatus"></span>
                    <span class="status-text"><strong>Event status: </strong>@(Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(Model.EventStatus))</span>
                </div>
                @if (@Model.EventStatus == "active") {
                    <form asp-action="CloseEvent" asp-route-eventId="@Model.EventId" method="post" onsubmit="return confirm('Are you sure you want to close this event? People will no longer be able to register for it.');">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="action-button">
                            <span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Pause>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                            </span>
                            <span>
                                Close event
                            </span>
                        </button>
                    </form>
                }
                else if (@Model.EventStatus == "closed") {
                    <form asp-action="OpenEvent" asp-route-eventId="@Model.EventId" method="post" onsubmit="return confirm('Are you sure you want to open this event? People will be able to register for it.');">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="action-button">
                            <span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Play>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral}))
                            </span>
                            <span>
                                Re-open event
                            </span>
                        </button>
                    </form>
                }
                <button class="action-button" onclick="location.href='/event/edit/@Model.EventId'">
                    <span>
                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Edit>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                    </span>
                    <span>
                        Edit
                    </span>
                </button>
                <button class="action-button" onclick="shareEvent('@Model.EventTitle', '@Model.EventId')">
                    <span>
                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Share>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                    </span>
                    <span id="share-btn-txt">
                        Share
                    </span>
                </button>
                <form asp-action="DeleteEvent" asp-route-eventId="@Model.EventId" method="post" onsubmit="return confirm('Are you sure you want to delete this event?');">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="action-button danger">
                        <span>
                            @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Delete>>(RenderMode.ServerPrerendered, new { Color = Color.Warning }))
                        </span>
                        <span>
                            Delete event
                        </span>
                    </button>
                </form>
            </div>
        </div>

        <!-- Questions Section -->
        <div class="questions">
            <h3>üìù Questions for Participants</h3>
            <description>These are the questions that participants will need to answer when they register for your event. you cannot add, edit or remove once the event is created.</description>
            <div class="question-container">
                <ul class="question">
                    @foreach (var question in Model.Questions)
                    {
                        <li for="Email">@question.Question</li>
                    }
                </ul>
            </div>
        </div>

        <!-- Registrants Section -->
        <div class="registrants">
            <!-- Registered Participants -->
            <div class="registered-participants">
                <h3>üõ´ Registered Participants (@totalRegisteredParticipant) </h3>
                <description>The following individuals have requested to participate in your event. Please take the time to review their responses to your questions.</description>
                
                <div class="participant-controls">
                    <div class="participant-control-button-container">

                        <div class="participant-filter">
                            <button class="filter-button" id="filter-button">
                                <span>All Statuses</span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Filter>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                            </button>
                            <div class="filter-menu" id="filter-menu">
                                <div class="filter-group">
                                    <h4>Status</h4>
                                    <button class="filter-option active" data-value="all">All statuses</button>
                                    <button class="filter-option" data-value="pending">Pending</button>
                                    <button class="filter-option" data-value="awaiting-confirmation">Awaiting Confirmation</button>
                                    <button class="filter-option" data-value="confirmed">Confirmed</button>
                                    <button class="filter-option" data-value="rejected">Rejected</button>
                                    <button class="filter-option" data-value="rejected-invitation">Rejected Invitation</button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="participant-sort">
                            <button class="sort-button" id="sort-button">
                                <span>Registration (Newest first)</span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.ArrowSortDown>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                            </button>
                            <div class="sort-menu" id="sort-menu">
                                <button class="sort-option active" data-value="date-desc">Registration (Newest first)</button>
                                <button class="sort-option" data-value="date-asc">Registration (Oldest first)</button>
                                <button class="sort-option" data-value="name-asc">Name (A-Z)</button>
                                <button class="sort-option" data-value="name-desc">Name (Z-A)</button>
                            </div>
                        </div>
                    </div>
                    <div class="search-container">
                        <span class="search-icon">
                            @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Search>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                        </span>
                        <input type="text" id="participant-search" placeholder="Search participants..." />
                    </div>
                    
                </div>
                
                @if (Model.AnswerSet.Count > 0)
                {
                    <div class="registrants-container">
                        @foreach (var participant in Model.AnswerSet)
                        {
                            var collapseId = "collapse_" + participant.User.UserId; // Unique ID for each dropdown
                            var participantTime = participant.RegistrationTime;

                            <div class="registrant-card" 
                                data-name="@participant.User.DisplayName.ToLower() @participant.User.Username.ToLower()" 
                                data-status="@participant.Status"
                                data-date="@participantTime.ToString("yyyy-MM-ddTHH:mm:ss")">
                                <div class="registrant-header" onclick="toggleDropdown('@collapseId')">
                                    <img src="@participant.User.ProfileImageUrl" alt="Profile" class="profile-img">
                                    <span class="registrant-name">
                                        @participant.User.DisplayName (@participant.User.Username)
                                        @{
                                            var status = participant.Status switch
                                            {
                                                "pending" => "status-pending",
                                                "awaiting-confirmation" => "status-await-confirmation",
                                                "rejected" => "status-rejected",
                                                "confirmed" => "status-confirmed",
                                                "rejected-invitation" => "status-rejected-invitation",
                                                _ => "status-pending"
                                            };
                                        }
                                        <span class="status-circle @status"></span>
                                    </span>

                                    <span class="dropdown-icon">
                                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.ChevronDown>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                                    </span>
                                </div>
                                <div class="registrant-details" id="@collapseId">
                                    <a href="/user/@participant.User.Username" class="action-button visit-profile-btn" target="_blank">
                                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Open>>(RenderMode.ServerPrerendered, new { Color = Color.Neutral }))
                                        Visit Profile
                                    </a>
                                    <div class="answer-wrapper">
                                        @foreach (var answer in participant.RegistrationAnswers)
                                        {
                                            <div class="form-group">
                                                <label for="Question">@answer.Question</label>
                                                <textarea class="form-control disabled-input" value="@answer.Answer" disabled>@answer.Answer</textarea>
                                            </div>
                                        }
                                    </div>
                                    @if (participant.Status == "pending") {
                                        <div class="button-group">
                                            <form asp-action="Invite" asp-controller="Event" asp-route-eventId="@Model.EventId" method="post">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="userId" value="@participant.User.UserId" />
                                                <button class="action-button approve-btn" type="submit">
                                                    <span>
                                                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Add>>(RenderMode.ServerPrerendered, new { Color = Color.Success }))
                                                    </span>
                                                    <span>
                                                        Invite
                                                    </span>
                                                </button>
                                            </form>
                                            <form asp-action="Reject" asp-controller="Event" asp-route-eventId="@Model.EventId" method="post">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="userId" value="@participant.User.UserId" />
                                                <button type="submit" class="action-button reject-btn">
                                                    <span>
                                                        @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Delete>>(RenderMode.ServerPrerendered, new { Color = Color.Warning }))
                                                    </span>
                                                    <span>
                                                        Reject
                                                    </span>
                                                </button>
                                            </form>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div id="no-participants-found" class="no-results hidden">
                        <p>No participants match your search criteria</p>
                    </div>
                }
                else
                {
                    <p class="text-muted">No participants have registered yet.</p>
                }
            </div>
            
            <!-- Invited Participants -->
            <div class="selected-participants">
                <h3>Invited participants (@totalInvitedParticipant/@Model.MaxParticipant) üíå</h3>
                <description>These are people your have been selected and invited.</description>
                
                <!-- Confirmed Participants -->
                <div class="confirmed-participants">
                    <div class="confirm-text-header">
                        <h4>‚úÖ Confirmed (@confirmedParticipantCount)</h4>
                        <button onclick="openBroadcastPopup()" class="action-button">
                            <span>
                                @(await Html.RenderComponentAsync<FluentIcon<Icons.Regular.Size16.Alert>>(RenderMode.ServerPrerendered, new { Color = Color.Warning }))
                            </span> 
                            <span>
                                Broadcast
                            </span>
                        </button>
                    </div>
                    <hr>
                    <div class="registrant-list">
                        @foreach (var confirmedParticipant in Model.ConfirmedParticipant)
                        {
                            <a href="/user/@confirmedParticipant.Username" target="_blank">
                                <div class="registrant">
                                    <img src="@confirmedParticipant.ProfileImageUrl" alt="Profile" class="profile-img">
                                    <span class="registrant-name">
                                        <strong>@confirmedParticipant.DisplayName</strong> (@confirmedParticipant.Username)
                                    </span>
                                </div>
                            </a>
                        }
                    </div>
                </div>
                
                <!-- Awaiting Confirmation -->
                <div class="await-confirmation">
                    <h4>üì® Awaiting Confirmation (@awaitingConfirmationParticipantCount)</h4>
                    <hr>
                    <div class="registrant-list">
                        @foreach (var awaitingParticipant in Model.AwaitingConfirmationParticipant)
                        {
                            <a href="/user/@awaitingParticipant.Username" target="_blank">
                                <div class="registrant">
                                    <img src="@awaitingParticipant.ProfileImageUrl" alt="Profile" class="profile-img">
                                    <span class="registrant-name">
                                        <strong>@awaitingParticipant.DisplayName</strong> (@awaitingParticipant.Username)
                                    </span>
                                </div>
                            </a>
                        }
                    </div>
                </div>
                
                <!-- Rejected Invitation -->
                <div class="rejected-invitation">
                    <h4>‚ùå Rejected Invitation (@rejectedConfirmationParticipantCount)</h4>
                    <hr>
                    <div class="registrant-list">
                        @foreach (var rejectedParticipant in Model.RejectedConfirmationParticipant)
                        {
                            <a href="/user/@rejectedParticipant.Username" target="_blank">
                                <div class="registrant">
                                    <img src="@rejectedParticipant.ProfileImageUrl" alt="Profile" class="profile-img">
                                    <span class="registrant-name">
                                        <strong>@rejectedParticipant.DisplayName</strong> (@rejectedParticipant.Username)
                                    </span>
                                </div>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>